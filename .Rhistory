# This step may return a warning:
# "Warning message: NAs introduced by coercion"
lside <- numbers.in[is.na(as.numeric(numbers.in))]
if (length(lside) != 1)
stop("Problem with rule definition. Rule needs to be defined in the form of equation, e.g., the rule dA/dt = k*A should be defined as A=k*A. Left side should contain a single species")
# Get the species involved in the ODEs
numbers.in <- unique(unlist(strsplit(hlp0 , split="[-+*/=)( ]")))
hlpR <- numbers.in[is.na(as.numeric(numbers.in))]
whatsIn <- hlpR[(hlpR != "")]
# Check if all species, parameters, or rates are defined
everythingDefined <- c(x$species$sName, x$reaction$r1, x$reaction$r2, x$rates$rrName, x$parameters$pName)
if (length(intersect(whatsIn, everythingDefined)) != length(whatsIn))
{
print("Not everything has been defined! You need to define the following objects: ")
print(setdiff(whatsIn, everythingDefined))
stop("Please define the missing object(s), then try again!")
}
# TBD  - check if there is any exception about what can be used here and what cannot be used.
# E.G., if the same species can be defined in the reaction and in the rule
# Add the rule ODE reaction in the list of reactions for stochastic simulation (propensity function list)
stochModel.tmp <-c(stochModel.tmp, as.character(hlp1[2]))
# Update/expand stochastic matrix
# Get species involved in the rule
speciesIn <- intersect(whatsIn, x$species$sName)
# Get species alreadi in the matrix
speciesMatrix <- row.names(x$stochMatrix)
# Check if there are any new species
areInRule.new <-setdiff(speciesIn, speciesMatrix)
toAdd.rows <- length(areInRule.new)
# Create a new matrix column (for the new reaction)
stMatrix.newColumn <- c(rep(0, nrow(x$stochMatrix)))
# Check which species appear in the rule, add -1 for them
stMatrix.newColumn[which(speciesMatrix %in% speciesIn)] <- -1
# Check if anything is in left side, replace that value with 1
stMatrix.newColumn[which(speciesMatrix %in% lside)] <- 1
# Add a new column to the matrix
stochMatrix.tmp <- cbind(stochMatrix.tmp, stMatrix.newColumn)
# Rename that column
colnames(stochMatrix.tmp)[ncol(stochMatrix.tmp)] <- paste("Rule_", i, sep="")
# Check if there are any new species (in the rules), if yes, create a new row(s) too
if (toAdd.rows > 0){
for (j in 1:toAdd.rows){
stMatrix.newRow <- c(rep(0, ncol(x$stochMatrix)))
if (areInRule.new[j] %in% lside){
stMatrix.newRow <- c(stMatrix.newRow, 1)
} else {
stMatrix.newRow <- c(stMatrix.newRow, -1)
}
stochMatrix.tmp <- rbind(stochMatrix.tmp, stMatrix.newRow)
# Rename that row
rownames(stochMatrix.tmp)[nrow(stochMatrix.tmp)] <- areInRule.new[j]
}
}
}
}
}
# Create a vector of propensity functions where state variables correspond to the names of the elements in x0
# This requires that SPECIES_NAMES are replaced with {SPECIES_NAMES}
matchStringFront <- sprintf("$(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringFront <- "{\\1}*"
matchStringMid <- sprintf("\\*(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringMid <- "*{\\1}*"
matchStringMid2 <- sprintf("\\*(%s)\\^", paste(x$species$sName, collapse="|"))
replaceStringMid2 <- "*{\\1}^"
matchStringEnd <- sprintf("\\*(%s)$", paste(x$species$sName, collapse="|"))
replaceStringEnd <- "*{\\1}"
for (i in 1:stochModel.length) {
# Order seems to matter in cases like A*B*A*B
stochModel.tmp[i] <- gsub(matchStringFront, replaceStringFront, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid2, replaceStringMid2, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringEnd, replaceStringEnd, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
}
# Stochastic model (final)
a <- stochModel.tmp
# Get stochastic matrix
nu <- stochMatrix.tmp
# Create a vector with initial values
# Order has to be the same as in the stochastic matrix!!!
# It does not matter if the matrix has row names or not
rn.hlp <- row.names(nu)
df.hlp <- data.frame(sName=x$species$sName, sVal=x$species$initVal)
df.hlp <- df.hlp[match(rn.hlp, df.hlp$sName),]
x0 <- eval(parse(text=paste("c(", paste(as.character(df.hlp$sName), "=", as.character(df.hlp$sVal), sep="", collapse=", "), ")", sep="")))
}
x0
a
nu
params
simResults.stoch <- solveStoch(exmp8, 100)
plotResults(simResults.stoch, title="Rules - test #2")
if (numRules.odes > 0){
for (i in 1:numRules.odes){
# Remove spaces from the rule
hlp0 <- gsub(" ","", x$rules$rRule[rules.odes[i]], fixed=TRUE)
# Check if the rule is defined as an equation
hlp1 <- strsplit(hlp0, "\\=")[[1]]
if (length(hlp1) != 2)
stop("Problem with rule definition. Rule needs to be defined in the form of equation, e.g., the rule dA/dt = k*A should be defined as A=k*A")
# Also check if the left side contains only one species
# Split the string at the operators
numbers.in <- unique(unlist(strsplit( hlp1[1] , split="[-+*/=)( ]")))
# Remove numbers from the results (cases like 5*A would be split as 5 and A)
# This step may return a warning:
# "Warning message: NAs introduced by coercion"
lside <- numbers.in[is.na(as.numeric(numbers.in))]
if (length(lside) != 1)
stop("Problem with rule definition. Rule needs to be defined in the form of equation, e.g., the rule dA/dt = k*A should be defined as A=k*A. Left side should contain a single species")
# Get the species involved in the ODEs
numbers.in <- unique(unlist(strsplit(hlp0 , split="[-+*/=)( ]")))
hlpR <- numbers.in[is.na(as.numeric(numbers.in))]
whatsIn <- hlpR[(hlpR != "")]
# Check if all species, parameters, or rates are defined
everythingDefined <- c(x$species$sName, x$reaction$r1, x$reaction$r2, x$rates$rrName, x$parameters$pName)
if (length(intersect(whatsIn, everythingDefined)) != length(whatsIn))
{
print("Not everything has been defined! You need to define the following objects: ")
print(setdiff(whatsIn, everythingDefined))
stop("Please define the missing object(s), then try again!")
}
# TBD  - check if there is any exception about what can be used here and what cannot be used.
# E.G., if the same species can be defined in the reaction and in the rule
# Add the rule ODE reaction in the list of reactions for stochastic simulation (propensity function list)
stochModel.tmp <-c(stochModel.tmp, as.character(hlp1[2]))
# Update/expand stochastic matrix
# Get species involved in the rule
speciesIn <- intersect(whatsIn, x$species$sName)
# Get species alreadi in the matrix
speciesMatrix <- row.names(x$stochMatrix)
# Check if there are any new species
areInRule.new <-setdiff(speciesIn, speciesMatrix)
toAdd.rows <- length(areInRule.new)
# Create a new matrix column (for the new reaction)
stMatrix.newColumn <- c(rep(0, nrow(x$stochMatrix)))
# Check which species appear in the rule, add -1 for them
stMatrix.newColumn[which(speciesMatrix %in% speciesIn)] <- -1
# Check if anything is in left side, replace that value with 1
stMatrix.newColumn[which(speciesMatrix %in% lside)] <- 1
# Add a new column to the matrix
stochMatrix.tmp <- cbind(stochMatrix.tmp, stMatrix.newColumn)
# Rename that column
colnames(stochMatrix.tmp)[ncol(stochMatrix.tmp)] <- paste("Rule_", i, sep="")
# Check if there are any new species (in the rules), if yes, create a new row(s) too
if (toAdd.rows > 0){
for (j in 1:toAdd.rows){
stMatrix.newRow <- c(rep(0, ncol(x$stochMatrix)))
if (areInRule.new[j] %in% lside){
stMatrix.newRow <- c(stMatrix.newRow, 1)
} else {
stMatrix.newRow <- c(stMatrix.newRow, -1)
}
stochMatrix.tmp <- rbind(stochMatrix.tmp, stMatrix.newRow)
# Rename that row
rownames(stochMatrix.tmp)[nrow(stochMatrix.tmp)] <- areInRule.new[j]
}
}
}
}
}
matchStringFront <- sprintf("$(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringFront <- "{\\1}*"
matchStringMid <- sprintf("\\*(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringMid <- "*{\\1}*"
matchStringMid2 <- sprintf("\\*(%s)\\^", paste(x$species$sName, collapse="|"))
replaceStringMid2 <- "*{\\1}^"
matchStringEnd <- sprintf("\\*(%s)$", paste(x$species$sName, collapse="|"))
replaceStringEnd <- "*{\\1}"
hlpVesna <- stochModel.tmp
for (i in 1:stochModel.length) {
# Order seems to matter in cases like A*B*A*B
stochModel.tmp[i] <- gsub(matchStringFront, replaceStringFront, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid2, replaceStringMid2, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringEnd, replaceStringEnd, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
}
stochModel.tmp
i <- 6
stochModel.tmp[i] <- gsub(matchStringFront, replaceStringFront, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid2, replaceStringMid2, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringEnd, replaceStringEnd, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
stochModel.tmp[i]
stochModel.length
total.reactions
length(x$reaction$rName)
length(x$rules$rName)
stochModel.tmp
x$stochModel
x$stochMatrix
library(sysBio)
makeModel(exmp8)
exmp8
if (!exists(deparse(substitute(x))))
stop("Specified model does not exist!")
isValidated <- 0
if (x$isChecked == 0){
print ("Model not validated... Validating model...")
isValidated <- validateModel(x)
}
if ((x$isChecked == 1) | (isValidated == 1)){
parameters.length <- length(x$parameters$pName)
rates.length <- length(x$rates$rrName)
reactions.length <- length(x$reaction$rName)
rules.length <- length(x$rules$rName)
stochModel.length <- length(x$stochModel)
# This will count reversible reactions as 1, not 2
total.reactions <- reactions.length + rules.length
# Vector of model parameters can be specified or NULL (defualt value)
params <- NULL
params.data <- NULL
# Check if we have any parameters. If we do, create a vector with parameters
if (parameters.length > 0)
params.data <- c(params.data, paste(x$parameters$pName, "=", x$parameters$initVal, sep=""))
# Check if there are rates marked as "fixed"
if ("FIXED" %in% toupper(x$rates$rType)){
get.index.fixed <- which(toupper(x$rates$rType) == "FIXED")
params.data <- c(params.data, paste(x$rates$rrName[get.index.fixed], "=", x$rates$rVal[get.index.fixed], sep=""))
}
if (!is.null(params.data))
params <- eval(parse(text=paste("c(", paste(params.data , sep="", collapse=", "), ")", sep="")))
stochModel.tmp <- x$stochModel
stochMatrix.tmp <- x$stochMatrix
# Check if there are any rules defined
if (rules.length > 0){
# If there are rules, we need to:
# 1. add it to propensity function list and
# 2. update/expand stochastic matrix
# Get ODEs rules numbers
rules.odes <- which(toupper(x$rules$rType) == "ODES")
# Check how many rules are there
numRules.odes <- length(rules.odes)
if (numRules.odes > 0){
for (i in 1:numRules.odes){
# Remove spaces from the rule
hlp0 <- gsub(" ","", x$rules$rRule[rules.odes[i]], fixed=TRUE)
# Check if the rule is defined as an equation
hlp1 <- strsplit(hlp0, "\\=")[[1]]
if (length(hlp1) != 2)
stop("Problem with rule definition. Rule needs to be defined in the form of equation, e.g., the rule dA/dt = k*A should be defined as A=k*A")
# Also check if the left side contains only one species
# Split the string at the operators
numbers.in <- unique(unlist(strsplit( hlp1[1] , split="[-+*/=)( ]")))
# Remove numbers from the results (cases like 5*A would be split as 5 and A)
# This step may return a warning:
# "Warning message: NAs introduced by coercion"
lside <- numbers.in[is.na(as.numeric(numbers.in))]
if (length(lside) != 1)
stop("Problem with rule definition. Rule needs to be defined in the form of equation, e.g., the rule dA/dt = k*A should be defined as A=k*A. Left side should contain a single species")
# Get the species involved in the ODEs
numbers.in <- unique(unlist(strsplit(hlp0 , split="[-+*/=)( ]")))
hlpR <- numbers.in[is.na(as.numeric(numbers.in))]
whatsIn <- hlpR[(hlpR != "")]
# Check if all species, parameters, or rates are defined
everythingDefined <- c(x$species$sName, x$reaction$r1, x$reaction$r2, x$rates$rrName, x$parameters$pName)
if (length(intersect(whatsIn, everythingDefined)) != length(whatsIn))
{
print("Not everything has been defined! You need to define the following objects: ")
print(setdiff(whatsIn, everythingDefined))
stop("Please define the missing object(s), then try again!")
}
# TBD  - check if there is any exception about what can be used here and what cannot be used.
# E.G., if the same species can be defined in the reaction and in the rule
# Add the rule ODE reaction in the list of reactions for stochastic simulation (propensity function list)
stochModel.tmp <-c(stochModel.tmp, as.character(hlp1[2]))
# Update/expand stochastic matrix
# Get species involved in the rule
speciesIn <- intersect(whatsIn, x$species$sName)
# Get species alreadi in the matrix
speciesMatrix <- row.names(x$stochMatrix)
# Check if there are any new species
areInRule.new <-setdiff(speciesIn, speciesMatrix)
toAdd.rows <- length(areInRule.new)
# Create a new matrix column (for the new reaction)
stMatrix.newColumn <- c(rep(0, nrow(x$stochMatrix)))
# Check which species appear in the rule, add -1 for them
stMatrix.newColumn[which(speciesMatrix %in% speciesIn)] <- -1
# Check if anything is in left side, replace that value with 1
stMatrix.newColumn[which(speciesMatrix %in% lside)] <- 1
# Add a new column to the matrix
stochMatrix.tmp <- cbind(stochMatrix.tmp, stMatrix.newColumn)
# Rename that column
colnames(stochMatrix.tmp)[ncol(stochMatrix.tmp)] <- paste("Rule_", i, sep="")
# Check if there are any new species (in the rules), if yes, create a new row(s) too
if (toAdd.rows > 0){
for (j in 1:toAdd.rows){
stMatrix.newRow <- c(rep(0, ncol(x$stochMatrix)))
if (areInRule.new[j] %in% lside){
stMatrix.newRow <- c(stMatrix.newRow, 1)
} else {
stMatrix.newRow <- c(stMatrix.newRow, -1)
}
stochMatrix.tmp <- rbind(stochMatrix.tmp, stMatrix.newRow)
# Rename that row
rownames(stochMatrix.tmp)[nrow(stochMatrix.tmp)] <- areInRule.new[j]
}
}
}
}
}
# Create a vector of propensity functions where state variables correspond to the names of the elements in x0
# This requires that SPECIES_NAMES are replaced with {SPECIES_NAMES}
matchStringFront <- sprintf("$(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringFront <- "{\\1}*"
matchStringMid <- sprintf("\\*(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringMid <- "*{\\1}*"
matchStringMid2 <- sprintf("\\*(%s)\\^", paste(x$species$sName, collapse="|"))
replaceStringMid2 <- "*{\\1}^"
matchStringEnd <- sprintf("\\*(%s)$", paste(x$species$sName, collapse="|"))
replaceStringEnd <- "*{\\1}"
for (i in 1:length(stochModel.tmp)) {
# Order seems to matter in cases like A*B*A*B
stochModel.tmp[i] <- gsub(matchStringFront, replaceStringFront, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid2, replaceStringMid2, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringEnd, replaceStringEnd, stochModel.tmp[i])
stochModel.tmp[i] <- gsub(matchStringMid, replaceStringMid, stochModel.tmp[i])
}
# Stochastic model (final)
a <- stochModel.tmp
# Get stochastic matrix
nu <- stochMatrix.tmp
# Create a vector with initial values
# Order has to be the same as in the stochastic matrix!!!
# It does not matter if the matrix has row names or not
rn.hlp <- row.names(nu)
df.hlp <- data.frame(sName=x$species$sName, sVal=x$species$initVal)
df.hlp <- df.hlp[match(rn.hlp, df.hlp$sName),]
x0 <- eval(parse(text=paste("c(", paste(as.character(df.hlp$sName), "=", as.character(df.hlp$sVal), sep="", collapse=", "), ")", sep="")))
}
x0
a
nu
simResults.stoch <- solveStoch(exmp8, 100)
plotResults(simResults.stoch, title="Rules - test #2")
plotResults(simResults, title="Rules - test #2")
simResults <-simulateModel(exmp8, times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
rm(list = ls())
exmp8 <- newModel("Rules - test #3")
addMAreaction(exmp8, "null  -> P", "k")
addMAreaction(exmp8, "Q = null", "rf", "rb")
addMAreaction(exmp8, "2*M + 0.9*N -> 0.5*P + Q + 10*R", "l")
addMAreaction(exmp8, "M = N", "lf", "lr")
addSpecies(exmp8, "P", 0)
addSpecies(exmp8, "Q", 10)
addSpecies(exmp8, "M", 15)
addSpecies(exmp8, "N", 11)
addSpecies(exmp8, "R", 0.2)
addMAreactRate(exmp8, "k", "fixed", 1)
addMAreactRate(exmp8, "rf", "fixed", 0.5)
addMAreactRate(exmp8, "rb", "fixed", 1)
addMAreactRate(exmp8, "lf", "fixed", 1)
addMAreactRate(exmp8, "lr", "fixed", 0.1)
addMAreactRate(exmp8, "l", "assigned", "2*M*N")
makeModel(exmp8)
addRule(exmp8, "rule1", "ODEs", "R=kr*P")
addRule(exmp8, "rule2", "ODEs", "Q=kq*R")
addParameters(exmp8, "kr", 0.01)
addParameters(exmp8, "kq", 0.25)
makeModel(exmp8)
#printInfo(exmp8)
simResults <-simulateModel(exmp8, times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
exmp8 <- newModel("Rules - test #3")
addMAreaction(exmp8, "null  -> P", "k")
addMAreaction(exmp8, "Q = null", "rf", "rb")
addMAreaction(exmp8, "2*M + 0.9*N -> 0.5*P + Q + 10*R", "l")
addMAreaction(exmp8, "M = N", "lf", "lr")
addSpecies(exmp8, "P", 0)
addSpecies(exmp8, "Q", 10)
addSpecies(exmp8, "M", 70)
addSpecies(exmp8, "N", 11)
addSpecies(exmp8, "R", 0.2)
addMAreactRate(exmp8, "k", "fixed", 1)
addMAreactRate(exmp8, "rf", "fixed", 0.5)
addMAreactRate(exmp8, "rb", "fixed", 1)
addMAreactRate(exmp8, "lf", "fixed", 1)
addMAreactRate(exmp8, "lr", "fixed", 0.1)
addMAreactRate(exmp8, "l", "assigned", "2*M*N")
makeModel(exmp8)
addRule(exmp8, "rule1", "ODEs", "R=kr*P")
addRule(exmp8, "rule2", "ODEs", "Q=kq*R")
addParameters(exmp8, "kr", 0.01)
addParameters(exmp8, "kq", 0.25)
makeModel(exmp8)
#printInfo(exmp8)
simResults <-simulateModel(exmp8, times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
exmp8 <- newModel("Rules - test #3")
addMAreaction(exmp8, "null  -> P", "k")
addMAreaction(exmp8, "Q = null", "rf", "rb")
addMAreaction(exmp8, "2*M + 0.9*N -> 0.5*P + Q + 10*R", "l")
addMAreaction(exmp8, "M = N", "lf", "lr")
addSpecies(exmp8, "P", 0)
addSpecies(exmp8, "Q", 10)
addSpecies(exmp8, "M", 70)
addSpecies(exmp8, "N", 110)
addSpecies(exmp8, "R", 0.2)
addMAreactRate(exmp8, "k", "fixed", 1)
addMAreactRate(exmp8, "rf", "fixed", 0.5)
addMAreactRate(exmp8, "rb", "fixed", 1)
addMAreactRate(exmp8, "lf", "fixed", 1)
addMAreactRate(exmp8, "lr", "fixed", 0.1)
addMAreactRate(exmp8, "l", "assigned", "2*M*N")
makeModel(exmp8)
addRule(exmp8, "rule1", "ODEs", "R=kr*P")
addRule(exmp8, "rule2", "ODEs", "Q=kq*R")
addParameters(exmp8, "kr", 0.01)
addParameters(exmp8, "kq", 0.25)
makeModel(exmp8)
#printInfo(exmp8)
simResults <-simulateModel(exmp8, times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
exmp8 <- newModel("Rules - test #3")
addMAreaction(exmp8, "null  -> P", "k")
addMAreaction(exmp8, "Q = null", "rf", "rb")
addMAreaction(exmp8, "2*M + 0.9*N -> 0.5*P + Q + 10*R", "l")
addMAreaction(exmp8, "M = N", "lf", "lr")
addSpecies(exmp8, "P", 0)
addSpecies(exmp8, "Q", 10)
addSpecies(exmp8, "M", 70)
addSpecies(exmp8, "N", 110)
addSpecies(exmp8, "R", 0.2)
addMAreactRate(exmp8, "k", "fixed", 1)
addMAreactRate(exmp8, "rf", "fixed", 0.5)
addMAreactRate(exmp8, "rb", "fixed", 1)
addMAreactRate(exmp8, "lf", "fixed", 1)
addMAreactRate(exmp8, "lr", "fixed", 0.1)
addMAreactRate(exmp8, "l", "assigned", "2*M*N")
makeModel(exmp8)
addRule(exmp8, "rule1", "ODEs", "R=kr*P")
addRule(exmp8, "rule2", "ODEs", "Q=kq*R")
addRule(exmp8, "rule2", "ODEs", "M=R")
addParameters(exmp8, "kr", 0.01)
addParameters(exmp8, "kq", 0.25)
makeModel(exmp8)
#printInfo(exmp8)
simResults <-simulateModel(exmp8, times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
exmp8 <- newModel("Rules - test #3")
addMAreaction(exmp8, "null  -> P", "k")
addMAreaction(exmp8, "Q = null", "rf", "rb")
addMAreaction(exmp8, "2*M + 0.9*N -> 0.5*P + Q + 10*R", "l")
addMAreaction(exmp8, "M = N", "lf", "lr")
addSpecies(exmp8, "P", 0)
addSpecies(exmp8, "Q", 10)
addSpecies(exmp8, "M", 70)
addSpecies(exmp8, "N", 110)
addSpecies(exmp8, "R", 0.2)
addMAreactRate(exmp8, "k", "fixed", 1)
addMAreactRate(exmp8, "rf", "fixed", 0.5)
addMAreactRate(exmp8, "rb", "fixed", 1)
addMAreactRate(exmp8, "lf", "fixed", 1)
addMAreactRate(exmp8, "lr", "fixed", 0.1)
addMAreactRate(exmp8, "l", "assigned", "2*M*N")
makeModel(exmp8)
addRule(exmp8, "rule1", "ODEs", "R=kr*P")
addRule(exmp8, "rule2", "ODEs", "Q=kq*R")
addRule(exmp8, "rule2", "ODEs", "M=5*R")
addParameters(exmp8, "kr", 0.01)
addParameters(exmp8, "kq", 0.25)
makeModel(exmp8)
#printInfo(exmp8)
simResults <-simulateModel(exmp8, times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
simResults.stoch <- solveStoch(exmp8, 100)
plotResults(simResults.stoch, title="Rules - test #2")
exmp9 <- newModel("Rules - test #3")
addMAreaction(exmp9, "null  -> P", "k")
addMAreaction(exmp9, "Q = null", "rf", "rb")
addMAreaction(exmp9, "0.5*P + Q + 10*R -> 2*M + 0.9*N", "l")
addSpecies(exmp9, "P", 0)
addSpecies(exmp9, "Q", 10)
addSpecies(exmp9, "M", 1)
addSpecies(exmp9, "N", 1)
addSpecies(exmp9, "R", 0.2)
addMAreactRate(exmp9, "k", "fixed", 1)
addMAreactRate(exmp9, "rf", "fixed", 0.5)
addMAreactRate(exmp9, "rb", "fixed", 1)
addMAreactRate(exmp9, "l", "assigned", "2*M*N")
makeModel(exmp9)
addRule(exmp9, "rule1", "ODEs", "R=kr*P")
addRule(exmp9, "rule2", "ODEs", "Q=kq*R")
addParameters(exmp9, "kr", 0.01)
addParameters(exmp9, "kq", 0.25)
makeModel(exmp9)
#printInfo(exmp9)
simResults <-simulateModel(exmp9,times=seq(0, 100, by = 0.1))
plotResults(simResults, title="Rules - test #2")
simResults.stoch <- solveStoch(exmp9, 100)
plotResults(simResults.stoch, title="Rules - test #2")
library(sysBio)
library(sysBio)
x <- simResults
if (ncol(x) > 2){
plotHlp1 <- stack(x[,2:ncol(x)])
plotHlp2 <- cbind(time = rep(x[,1], times=(ncol(x)-1)), plotHlp1)
colnames(plotHlp2) <- c("Time", "SpeciesAmounts", "Species")
} else {
plotHlp2 <- cbind(x, Species=rep(colnames(x)[2], times=nrow(x)))
colnames(plotHlp2) <- c("Time", "SpeciesAmounts", "Species")
}
ggplot2::qplot(Time, SpeciesAmounts, data=plotHlp2, geom="smooth", se=FALSE, colour=Species, position="identity", xlab="Time (seconds)", ylab="Species amounts", main=title) + ggplot2::theme_bw(18)
?qplot
library(sysBio)
plotResults(simResults, title="Simulation results")
devtools::document()
library(sysBio2)
devtools::document()
