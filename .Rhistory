x$model
if(x$model == NULL) print("A")
if(x$model == NA) print("A")
if(!x$model) print("A")
if(x$model) print("A")
if(length(x$model) > 0) print("A")
length(x$model) > 0
length(x$model)
hlp0 <- gsub(" ","", x$rules$rRule[rules.odes[i]], fixed=TRUE)
rates.all <- unique(unlist(strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")))
numR <- length(x$reaction$reaction)
x
numR <- length(x$rules)
numR <- length(x$$rules$rRule)
numR <- length(x$rules$rRule)
hlp0 <- sapply(1:numR, function(y) {gsub(" ","", x$rules$rRule[y] , fixed=TRUE) })
rates.all <- unique(unlist(sapply(1:numR, function(y) {strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")})))
numR <- length(x$reaction$reaction)
hlp0 <- sapply(1:numR, function(y) {gsub(" ","", x$reaction$reaction[y] , fixed=TRUE) })
hlp1 <- unlist(sapply(1:numR, function(y) {strsplit(hlp0[y], "\\->")}))
hlp2 <- unlist(sapply(1:length(hlp1), function(y) {strsplit(hlp1[y], "\\=")}))
hlp3 <- unique(unlist(sapply(1:length(hlp2), function(y) {strsplit(hlp2[y], "\\+")})))
numSp <- setdiff(hlp3, "null")
setdiff(numSp, x$species$sName)
setdiff(numSp, x$species$sName)
numSp
setdiff(x$species$sName, c(numSp, "null"))
whatIsMissing <- setdiff(x$species$sName, c(numSp, "null"))
setdiff(whatIsMissing, rates.all)
x
everythingDefined <- c(x$species$sName, x$reactions$r1, reactions$r2, x$species$sName, x$rates$rrName)
everythingDefined <- c(x$species$sName, x$reaction$r1, reaction$r2, x$species$sName, x$rates$rrName)
everythingDefined <- c(x$species$sName, x$reaction$r1, x$reaction$r2, x$species$sName, x$rates$rrName)
length(setdiff(rule.all, everythingDefined))
rule.all <- unique(unlist(sapply(1:rule.toBeFound, function(y) {strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")})))
hlp0 <- sapply(1:rule.toBeFound, function(y) {gsub(" ","", x$rules$rRule[y] , fixed=TRUE) })
rule.all <- unique(unlist(sapply(1:rule.toBeFound, function(y) {strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")})))
rule.toBeFound <- length(x$rules$rRule)
hlp0 <- sapply(1:rule.toBeFound, function(y) {gsub(" ","", x$rules$rRule[y] , fixed=TRUE) })
rule.all <- unique(unlist(sapply(1:rule.toBeFound, function(y) {strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")})))
everythingDefined <- c(x$species$sName, x$reaction$r1, x$reaction$r2, x$species$sName, x$rates$rrName)
length(setdiff(rule.all, everythingDefined)
)
rm(list = ls())
library(sysBio)
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac = Ga/Gt")
addSpecies(t3, "Ga_frac", 0.0)
addSpecies(t3, "Gt", 10000)
validateModel(t3)
library(sysBio)
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac = Ga/Gt")
addSpecies(t3, "Ga_frac", 0.0)
addSpecies(t3, "Gt", 10000)
validateModel(t3)
makeModel(t3)
printInfo(t3)
simResults <-simulateModel(t3, times=seq(0, 1000, by = 10))
t3
simResults <-simulateModel(t3, times=seq(0, 1000, by = 10))
printInfo(t3)
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
validateModel(t3)
makeModel(t3)
simResults <-simulateModel(t3, times=seq(0, 1000, by = 10))
plotResults(simResults[,c(1, 3:8)], title="Yeast Heterotrimeric G Protein Cycle")
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac = Ga / (Ga + G + Gd)")
addSpecies(t3, "Ga_frac", 0.0)
validateModel(t3)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac = Ga/(Ga+G+Gd)")
validateModel(t3)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac=Ga/(Ga+G+Gd)")
addSpecies(t3, "Ga_frac", 0.0)
validateModel(t3)
t3
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac=Ga/(Ga+G+Gd)")
addSpecies(t3, "Ga_frac", 0.0)
validateModel(t3)
t3
x <- t3
numR  <- length(x$rules$rRule)
hlp0 <- sapply(1:numR , function(y) {gsub(" ","", x$rules$rRule[y] , fixed=TRUE) })
rule.all <- unique(unlist(sapply(1:numR , function(y) {strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")})))
strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")
hlp1 <- unique(unlist(sapply(1:numR , function(y) {strsplit( hlp0, split="[-+*/=)( ]|[^x][0-9]+|^[0-9]+")})))
rule.all <- hlp1(length(hlp1) > 0)
rule.all <- hlp1[length(hlp1) > 0]
length(hlp1)
hlp0[hlp0 =! ""]
hlp0
hlp1
hlp1 != ""
hlp1[(hlp1 != "")]
library(sysBio)
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac=Ga/(Ga+G+Gd)")
addSpecies(t3, "Ga_frac", 0.0)
validateModel(t3)
makeModel(t3)
library(sysBio)
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
addRule(t3, "G-Protein fraction","ODEs", "Ga_frac=Ga/(Ga+G+Gd)")
addSpecies(t3, "Ga_frac", 0.0)
validateModel(t3)
makeModel(t3)
printInfo(t3)
simResults <-simulateModel(t3, times=seq(0, 1000, by = 10))
plotResults(simResults[,c(1, 3:8)], title="Yeast Heterotrimeric G Protein Cycle")
head(simResults)
################################################
#rm(list = ls())
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
validateModel(t3)
makeModel(t3)
printInfo(t3)
simResults <-simulateModel(t3, times=seq(0, 1000, by = 10))
# Plot results, but skip L, because value is too hight
plotResults(simResults[,c(1, 3:8)], title="Yeast Heterotrimeric G Protein Cycle")
rt1 <- newModel("Rule test #1")
rm(list = ls())
rt1 <- newModel("Rule test #1")
addMAreaction(rt1, "A -> B", r1="m")
rt1 <- newModel("Rule test #1")
addMAreaction(rt1, "A -> B", r1="m")
addSpecies(rt1, "A", 10)
addSpecies(rt1, "B", 0)
addSpecies(rt1, "C", 5)
addMAreactRate(rt1, "m", "assigned", "k1*A")
addParameters(rt1, "k1", 1)
addParameters(rt1, "k2", 1)
addRule(rt1, "rule1", "ODEs", "C=K2*A")
validateModel(rt1)
makeModel(rt1)
rt1
simResults <-simulateModel(rt1)
rt1 <- newModel("Rule test #1")
addMAreaction(rt1, "A -> B", r1="m")
addSpecies(rt1, "A", 10)
addSpecies(rt1, "B", 0)
addSpecies(rt1, "C", 5)
addMAreactRate(rt1, "m", "assigned", "k1*A")
addParameters(rt1, "k1", 1)
addParameters(rt1, "k2", 1)
addRule(rt1, "rule1", "ODEs", "C=k2*A")
validateModel(rt1)
makeModel(rt1)
printInfo(t3)
simResults <-simulateModel(rt1)
plotResults(simResults, title="Model - rule - test")
rm(list = ls())
test <- newModel("cell")
addMAreaction(test, "DNA -> DNA + mRNA", r1="v1", name="Transcription")
addMAreaction(test, "mRNA -> mRNA + protein", r1="v2", name="Translation")
addMAreaction(test, "DNA + protein -> DNA_protein", r1="v3", name="Binding")
addMAreaction(test, "DNA_protein -> DNA + protein", r1="v4", name="Unbinding")
addMAreaction(test, "mRNA -> null", r1="v5", name="Degradation: mRNA")
addMAreaction(test, "protein -> null", r1="v6", name="Degradation:protein")
#validateModel(test)
addMAreactRate(test, "v1", "assigned", "k1*DNA")
addMAreactRate(test, "v2", "assigned", "k2*mRNA")
addMAreactRate(test, "v3", "assigned", "k3*DNA*protein")
addMAreactRate(test, "v4", "assigned", "k3r*DNA_protein")
addMAreactRate(test, "v5", "assigned", "k4*mRNA")
addMAreactRate(test, "v6", "assigned", "k5*protein")
#validateModel(test)
addSpecies(test, "DNA", 50)
addSpecies(test, "mRNA", 0)
addSpecies(test, "protein", 0)
addSpecies(test, "DNA_protein", 0)
#validateModel(test)
addParameters(test, "k1", 0.2)
addParameters(test, "k2", 20)
addParameters(test, "k3", 0.2)
addParameters(test, "k3r", 1)
addParameters(test, "k4", 1.5)
addParameters(test, "k5", 1)
validateModel(test)
makeModel(test)
test
test$model
library(GillespieSSA)
parms <- c(k1=0.2, k2=20, k3=0.2, k3r=1, k4=1.5, k5=1)
nu <- matrix(c(0,0,-1,1,0,0,1,0,0,0,-1,0,0,1,-1,1,0,-1,0,0,1,-1,0,0), nrow=4, byrow=TRUE)
x0 <- c(DNA=50, mRNA=0, protein=0, DNA_protein=0)
a <- c("k1*{DNA}*{DNA}", "k2*{mRNA}*{mRNA}", "k3*{DNA}*{protein}*{DNA}*{protein}", "k3r*{DNA_protein}*{DNA_protein}", "k4*{mRNA}*{mRNA}", "k5*{protein}*{protein}")
out <- ssa(x0,a,nu, parms, tf=100)
ssa.plot(out, by=10)
ssa.plot(out, plot.from=2, plot.to=3,by=30)
out <- ssa(x0,a,nu, parms, tf=10)
ssa.plot(out, by=10)
head(out[1])
head(out[1][1])
plot(head(out[1][1]))
plot(head(out$data)
)
plot(out$data)
plot(out$data[,1])
plot(out$data[,3])
plot(out$data[,1], out$data[,3])
plot(out$data[,1], out$data[,2])
plot(out$data[,1], out$data[,4])
plot(out$data[,1], out$data[,5])
plot(out$data[,1], out$data[,6])
plot(out$data[,1], out$data[,3])
plot(out$data[,2], out$data[,3])
hlp <- as.data.frame(out)
hlp <- as.data.frame(out$data)
?ssa
ssa
library(sysBio)
rm(list = ls())
test <- newModel("cell")
addMAreaction(test, "DNA -> DNA + mRNA", r1="v1", name="Transcription")
addMAreaction(test, "mRNA -> mRNA + protein", r1="v2", name="Translation")
addMAreaction(test, "DNA + protein -> DNA_protein", r1="v3", name="Binding")
addMAreaction(test, "DNA_protein -> DNA + protein", r1="v4", name="Unbinding")
addMAreaction(test, "mRNA -> null", r1="v5", name="Degradation: mRNA")
addMAreaction(test, "protein -> null", r1="v6", name="Degradation:protein")
#validateModel(test)
addMAreactRate(test, "v1", "assigned", "k1*DNA")
addMAreactRate(test, "v2", "assigned", "k2*mRNA")
addMAreactRate(test, "v3", "assigned", "k3*DNA*protein")
addMAreactRate(test, "v4", "assigned", "k3r*DNA_protein")
addMAreactRate(test, "v5", "assigned", "k4*mRNA")
addMAreactRate(test, "v6", "assigned", "k5*protein")
#validateModel(test)
addSpecies(test, "DNA", 50)
addSpecies(test, "mRNA", 0)
addSpecies(test, "protein", 0)
addSpecies(test, "DNA_protein", 0)
#validateModel(test)
addParameters(test, "k1", 0.2)
addParameters(test, "k2", 20)
addParameters(test, "k3", 0.2)
addParameters(test, "k3r", 1)
addParameters(test, "k4", 1.5)
addParameters(test, "k5", 1)
validateModel(test)
makeModel(test)
printInfo(test)
library(sysBio)
t3 <- newModel("Yeast Heterotrimeric G Protein Cycle")
#ftp://ftp.sogr.idv.tw/Backup%20Files/1/1/V0/D/Program%20Files/MATLAB/R2007b/toolbox/simbio/simbiodemos/html/gprotein.html
addMAreaction(t3, "L + R = RL", r1="kRL", r2="kRLm", name="Receptor-ligand interaction")
addMAreaction(t3, "Gd + Gbg -> G", r1="kG1", name="Heterotrimeric G-protein formation")
addMAreaction(t3, "RL + G -> Ga + Gbg + RL", r1="kGa", name="G protein activation")
addMAreaction(t3, "R = null", r1="kRdo", r2="kRs", name="Receptor synthesis and degradation")
addMAreaction(t3, "RL -> null", r1="kRD1", name="Receprot-ligand degradation")
addMAreaction(t3, "Ga -> Gd", r1="kGd", name="G proten inactivation")
addSpecies(t3, "L", 6.022E+017)
addSpecies(t3, "R", 10000.0)
addSpecies(t3, "RL", 0.0)
addSpecies(t3, "Gd", 3000)
addSpecies(t3, "Gbg", 3000)
addSpecies(t3, "G", 7000)
addSpecies(t3, "Ga", 0.0)
addMAreactRate(t3, "kRL", "fixed", 3.32E-18)
addMAreactRate(t3, "kRLm", "fixed", 0.01)
addMAreactRate(t3, "kG1", "fixed", 1.0)
addMAreactRate(t3, "kGa", "fixed", 1.0E-5)
addMAreactRate(t3, "kRdo", "fixed", 4.0E-4)
addMAreactRate(t3, "kRs", "fixed", 4.0)
addMAreactRate(t3, "kRD1", "fixed", 0.0040)
addMAreactRate(t3, "kGd", "fixed", 0.11)
validateModel(t3)
makeModel(t3)
printInfo(t3)
simResults <-simulateModel(t3, times=seq(0, 50, by = 10))
# Plot results, but skip L, because value is too hight
plotResults(simResults[,c(1, 3:8)], title="Yeast Heterotrimeric G Protein Cycle")
simResults.stoch <- solveStoch(t3, 50)
plotResults(simResults.stoch[,c(1, 3:8)], title="Yeast Heterotrimeric G Protein Cycle)")
simResults <-simulateModel(t3, times=seq(0, 50, by = 0.5))
plotResults(simResults[,c(1, 3:8)], title="Yeast Heterotrimeric G Protein Cycle")
rm(list = ls())
t2 <- newModel("Zero order rates")
addMAreaction(t2, "null  -> P", "k")
addSpecies(t2, "P", 0)
addMAreactRate(t2, "k", "fixed", 1)
makeModel(t2)
simResults <-simulateModel(t2)
plotResults(simResults, title="Zero order reaction")
simResults.stoch <- solveStoch(t2)
t2
out <- ssa(c(P=0), c("k"), as.matrix(1), c("k=1"), 10)
library(GillespieSSA)
out <- ssa(c(P=0), c("k"), as.matrix(1), c("k=1"), 10)
x <- t2
parameters.length <- length(x$parameters$pName)
rates.length <- length(x$rates$rrName)
reactions.length <- length(x$reaction$rName)
rules.length <- length(x$rules$rName)
stochModel.length <- length(x$stochModel)
total.reactions <- reactions.length + rules.length
# Figure rules later - would require changing the initial matrix as well
# Vector of model parameters can be specified or NULL (defualt value)
params <- NULL
params.data <- NULL
# Check if we have any parameters. If we do, create a vector with parameters
if (parameters.length > 0)
params.data <- c(params.data, paste(x$parameters$pName, "=", x$parameters$initVal, sep=""))
# Check if there are rates marked as "fixed"
if ("FIXED" %in% toupper(x$rates$rType)){
get.index.fixed <- which(toupper(x$rates$rType) == "FIXED")
params.data <- c(params.data, paste(x$rates$rrName[get.index.fixed], "=", x$rates$rVal[get.index.fixed], sep=""))
}
if (!is.null(params.data))
params <- eval(parse(text=paste("c(", paste(params.data , sep="", collapse=", "), ")", sep="")))
# Create a vector of propensity functions where state variables correspond to the names of the elements in x0
# This requires that SPECIES_NAMES are replaced with {SPECIES_NAMES}
matchStringFront <- sprintf("$(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringFront <- "{\\1}*"
matchStringMid <- sprintf("\\*(%s)\\*", paste(x$species$sName, collapse="|"))
replaceStringMid <- "*{\\1}*"
matchStringEnd <- sprintf("\\*(%s)$", paste(x$species$sName, collapse="|"))
replaceStringEnd <- "*{\\1}"
for (i in 1:stochModel.length) {
x$stochModel[i] <- gsub(matchStringFront, replaceStringFront, x$stochModel[i])
x$stochModel[i] <- gsub(matchStringMid, replaceStringMid, x$stochModel[i])
x$stochModel[i] <- gsub(matchStringEnd, replaceStringEnd, x$stochModel[i])
}
a <- x$stochModel
# Create a vector with initial values
x0 <- eval(parse(text=paste("c(", paste(x$species$sName, "=", x$species$initVal, sep="", collapse=", "), ")", sep="")))
# Get stochastic matrix
nu <- x$stochMatrix
a
out <- ssa(x0,a,nu, params, 10, berbose=TRUE)
out <- ssa(x0,a,nu, params, 10, verbose=TRUE)
ssa(x0=c(X=1000),a=c("c*X"),nu=matrix(-1),parms=c(c=0.5),tf=10)
ssa(x0=c(X=0),a=c("c"),nu=matrix(1),parms=c(c=1),tf=10)
ssa(x0=c(X=0),a=c("c*X"),nu=matrix(1),parms=c(c=1),tf=10)
out <- ssa(x0=c(X=0),a=c("c*X"),nu=matrix(1),parms=c(c=1),tf=10)
out <- ssa(x0=c(X=0),a=c("c{X}"),nu=matrix(1),parms=c(c=1),tf=10)
out <- ssa(x0=c(X=0),a=c("c*{X}"),nu=matrix(1),parms=c(c=1),tf=10)
